-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module InstantParser.ParInstant
  ( happyError
  , myLexer
  , pProgram
  , pStmt
  , pListStmt
  , pExp1
  , pExp2
  , pExp3
  , pExp4
  , pExp
  ) where

import Prelude

import qualified InstantParser.AbsInstant
import InstantParser.LexInstant

}

%name pProgram Program
%name pStmt Stmt
%name pListStmt ListStmt
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp Exp
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1) }
  ')'      { PT _ (TS _ 2) }
  '*'      { PT _ (TS _ 3) }
  '+'      { PT _ (TS _ 4) }
  '-'      { PT _ (TS _ 5) }
  '/'      { PT _ (TS _ 6) }
  ';'      { PT _ (TS _ 7) }
  '='      { PT _ (TS _ 8) }
  L_Ident  { PT _ (TV $$)  }
  L_integ  { PT _ (TI $$)  }

%%

Ident :: { InstantParser.AbsInstant.Ident }
Ident  : L_Ident { InstantParser.AbsInstant.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Program :: { InstantParser.AbsInstant.Program }
Program : ListStmt { InstantParser.AbsInstant.Prog $1 }

Stmt :: { InstantParser.AbsInstant.Stmt }
Stmt
  : Ident '=' Exp { InstantParser.AbsInstant.SAss $1 $3 }
  | Exp { InstantParser.AbsInstant.SExp $1 }

ListStmt :: { [InstantParser.AbsInstant.Stmt] }
ListStmt
  : {- empty -} { [] }
  | Stmt { (:[]) $1 }
  | Stmt ';' ListStmt { (:) $1 $3 }

Exp1 :: { InstantParser.AbsInstant.Exp }
Exp1
  : Exp2 '+' Exp1 { InstantParser.AbsInstant.ExpAdd $1 $3 }
  | Exp2 { $1 }

Exp2 :: { InstantParser.AbsInstant.Exp }
Exp2
  : Exp2 '-' Exp3 { InstantParser.AbsInstant.ExpSub $1 $3 }
  | Exp3 { $1 }

Exp3 :: { InstantParser.AbsInstant.Exp }
Exp3
  : Exp3 '*' Exp4 { InstantParser.AbsInstant.ExpMul $1 $3 }
  | Exp3 '/' Exp4 { InstantParser.AbsInstant.ExpDiv $1 $3 }
  | Exp4 { $1 }

Exp4 :: { InstantParser.AbsInstant.Exp }
Exp4
  : Integer { InstantParser.AbsInstant.ExpLit $1 }
  | Ident { InstantParser.AbsInstant.ExpVar $1 }
  | '(' Exp ')' { $2 }

Exp :: { InstantParser.AbsInstant.Exp }
Exp : Exp1 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

